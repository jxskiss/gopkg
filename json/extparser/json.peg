# Extended JSON grammar
#
# Reference:
# 1. https://json.org/ and ECMA-262 Ed.5
# 2. https://github.com/pointlander/peg
#
# Extended features:
# 1. trailing comma of Object and Array
# 2. traditional, end of line, or pragma comments
# 3. Python boolean constants
# 4. Python None as null
# 5. Python style single quote string
# 6. import other JSON files


package extparser

type JSON Peg {
}


Document  <-  Spacing JSON EOT
JSON      <-  ( Object / Array / String / True / False / Null / Number / Import ) Spacing
Object    <-  LWING ( String COLON JSON COMMA )* ( String COLON JSON )? RWING
Array     <-  LBRK ( JSON COMMA )* JSON? RBRK
Import    <-  '@import(' String ')'

String              <-  SingleQuoteLiteral / DoubleQuoteLiteral
SingleQuoteLiteral  <-  '\'' ( SingleQuoteEscape / !['\\\n\r] .)* '\''
DoubleQuoteLiteral  <-  '\"' ( DoubleQuoteEscape / !["\\\n\r] .)* '\"'
SingleQuoteEscape   <-  '\\' ( [btnfr'\\/] / UnicodeEscape )
DoubleQuoteEscape   <-  '\\' ( [btnfr"\\/] / UnicodeEscape )
UnicodeEscape       <-  'u' HexDigit HexDigit HexDigit HexDigit
HexDigit            <-  [a-f] / [A-F] / [0-9]

True            <-  'true'  / 'True'
False           <-  'false' / 'False'
Null            <-  'null'  / 'None'

Number          <-  Minus? IntegralPart FractionalPart? ExponentPart?
Minus           <-  '-'
IntegralPart    <-  '0' / [1-9] [0-9]*
FractionalPart  <-  '.' [0-9]+
ExponentPart    <-  "e" ( '+' / '-' )? [0-9]+

Spacing         <-  ( Whitespace / LongComment / LineComment / Pragma )*
Whitespace      <-  [ \t\r\n]+
LongComment     <-  '/*'  (!'*/' .)*    '*/'
LineComment     <-  '//'  (![\r\n] .)*  [\r\n]
Pragma          <-  '#'   (![\r\n] .)*  [\r\n]

LWING           <-  '{'  Spacing
RWING           <-  '}'  Spacing
LBRK            <-  '['  Spacing
RBRK            <-  ']'  Spacing
COMMA           <-  ','  Spacing
COLON           <-  ':'  Spacing

EOT <- !.
