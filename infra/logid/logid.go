package logid

import (
	"encoding/base32"
	"net"
	"time"
)

var defaultGen Generator

func init() {
	defaultGen = NewV1Gen()
}

type Generator interface {

	// Gen generates a new log ID string, it should always return
	// a valid log ID, and don't generate duplicate log IDs.
	Gen() string
}

// SetDefault changes the default generator.
//
// The default generator may be changed by the main program,
// but generally library code shall not call this function.
func SetDefault(gen Generator) {
	defaultGen = gen
}

// Gen generates a new log ID string using the default generator.
func Gen() string {
	return defaultGen.Gen()
}

var b32Enc = base32.
	NewEncoding("0123456789abcdefghijklmnopqrstuv").
	WithPadding(base32.NoPadding)

// minLength is the minimum length of a log ID generated by this package.
// Update this when adding new generators.
const minLength = v1Length

// strTimeMilli is the time format used in string form of a log ID info.
const strTimeMilli = "20060102150405.000Z0700"

// Decode decodes a log ID string and returns the parsed information.
func Decode(s string) (info Info) {
	if len(s) >= minLength {
		switch s[0] {
		case v1Version:
			return Info{decodeV1(s)}
		case v2Version:
			return Info{decodeV2(s)}
		}
	}
	return // invalid
}

// Info holds parsed information of a log ID string.
type Info struct {
	infoInterface
}

// Valid tells whether the info holds valid log ID information.
func (i Info) Valid() bool {
	return i.infoInterface != nil && i.infoInterface.Valid()
}

// Version returns the log ID's version.
func (i Info) Version() string {
	if i.Valid() {
		return i.infoInterface.Version()
	}
	return "0"
}

// Time returns the time information of the log ID if available,
// else it returns a zero time.Time{}.
func (i Info) Time() time.Time {
	if i.Valid() {
		return i.infoInterface.Time()
	}
	return time.Time{}
}

// IP returns the IP information of the log ID if available,
// else it returns nil.
func (i Info) IP() net.IP {
	if i.Valid() {
		return i.infoInterface.IP()
	}
	return nil
}

// Random returns the random part of the log ID if available,
// else it returns an empty string.
func (i Info) Random() string {
	if i.Valid() {
		return i.infoInterface.Random()
	}
	return ""
}

// String formats the log ID's information to string.
func (i Info) String() string {
	if i.Valid() {
		return i.infoInterface.String()
	}
	return "0|invalid"
}

type infoInterface interface {
	Valid() bool
	Version() string
	Time() time.Time
	IP() net.IP
	Random() string
	String() string
}
