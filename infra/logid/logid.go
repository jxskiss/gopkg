package logid

import (
	"encoding/base32"
	"time"
)

var defaultGen = NewV1Gen()

type Generator interface {

	// Gen generates a new log ID string, it should always return
	// a valid log ID, and don't generate duplicate log IDs.
	Gen() string
}

// SetDefault changes the default generator.
//
// The default generator may be changed by the main program,
// but generally library code shall not call this function.
func SetDefault(gen Generator) {
	defaultGen = gen
}

// Gen generates a new log ID string using the default generator.
func Gen() string {
	return defaultGen.Gen()
}

// RFC 4648, base32.StdEncoding
var (
	b32Enc = base32.StdEncoding.WithPadding(base32.NoPadding)
	b32Std = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"
	b32Dec = "" +
		"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff" +
		"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff" +
		"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff" +
		"\xff\xff\x1a\x1b\x1c\x1d\x1e\x1f\xff\xff\xff\xff\xff\xff\xff\xff" +
		"\xff\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e" +
		"\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\xff\xff\xff\xff\xff" +
		"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff" +
		"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"
)

func encodeBase32(b []byte, x int64) {
	i := len(b) - 1
	for x > 0 {
		b[i] = b32Std[x&31]
		x >>= 5
		i--
	}
	for i >= 0 {
		b[i] = '0'
		i--
	}
}

func decodeBase32(b string) (t int64, err error) {
	for i, x := range b {
		if x == '0' {
			continue
		}
		if b32Dec[x] == 0xff {
			return 0, base32.CorruptInputError(i)
		}
		t = (t << 5) | int64(b32Dec[x])
	}
	return t, nil
}

// minLength is the minimum length of a log ID generated by this package.
// Update this when adding new generators.
const minLength = v1Length

// strTimeMilli is the time format used in string form of a log ID info.
const strTimeMilli = "20060102150405.000Z0700"

func formatTime(t time.Time) string {
	return t.Format(strTimeMilli)
}

// Decode decodes a log ID string and returns the parsed information.
func Decode(s string) (info Info) {
	if len(s) >= minLength {
		switch s[0] {
		case v1Version:
			return decodeV1Info(s)
		case v2Version:
			return decodeV2Info(s)
		}
	}
	return invalidInfo{}
}

// Info holds parsed information of a log ID string.
type Info interface {
	Valid() bool
	Version() byte
	String() string
}

type invalidInfo struct{}

func (invalidInfo) Valid() bool    { return false }
func (invalidInfo) Version() byte  { return '0' }
func (invalidInfo) String() string { return "0|invalid" }
