// Code generated by go generate at 2020-02-26T23:39:13+08:00; DO NOT EDIT.

package set

import "encoding/json"

// Int64 is int64 set collection.
// The zero value of Int64 is an empty instance ready to use.
type Int64 struct {
	m map[int64]struct{}
}

// NewInt64 creates Int64 instance.
func NewInt64(vals ...int64) Int64 {
	size := max(len(vals), minSize)
	set := Int64{
		m: make(map[int64]struct{}, size),
	}
	set.Add(vals...)
	return set
}

// NewInt64WithSize creates Int64 instance with given initial size.
func NewInt64WithSize(size int) Int64 {
	set := Int64{
		m: make(map[int64]struct{}, size),
	}
	return set
}

// Add adds values into the set.
func (s *Int64) Add(vals ...int64) {
	if s.m == nil {
		size := max(len(vals), minSize)
		s.m = make(map[int64]struct{}, size)
	}
	for idx := range vals {
		s.m[vals[idx]] = struct{}{}
	}
}

// Del deletes values from the set.
func (s *Int64) Del(vals ...int64) {
	for idx := range vals {
		delete(s.m, vals[idx])
	}
}

// Pop pops an element from the set, in no particular order.
func (s *Int64) Pop() int64 {
	for val := range s.m {
		delete(s.m, val)
		return val
	}
	return 0
}

// Iterate iterates the set in no particular order and call the given function
// for each set element.
func (s *Int64) Iterate(fn func(int64)) {
	for val := range s.m {
		fn(val)
	}
}

// Contains returns true if the set contains all the values.
func (s *Int64) Contains(vals ...int64) bool {
	if len(vals) == 0 {
		return false
	}
	for _, v := range vals {
		if _, ok := s.m[v]; !ok {
			return false
		}
	}
	return true
}

// ContainsAny returns true if the set contains any of the values.
func (s *Int64) ContainsAny(vals ...int64) bool {
	for _, v := range vals {
		if _, ok := s.m[v]; ok {
			return true
		}
	}
	return false
}

// Diff returns new Int64 about the values which other set doesn't contain.
func (s *Int64) Diff(other Int64) Int64 {
	res := NewInt64WithSize(s.Size())

	for val := range s.m {
		if _, ok := other.m[val]; !ok {
			res.m[val] = struct{}{}
		}
	}
	return res
}

// DiffSlice is similar to Diff, but takes a slice as parameter.
func (s *Int64) DiffSlice(other []int64) Int64 {
	tmp := NewInt64WithSize(len(other))
	count := 0
	for _, val := range other {
		if _, ok := s.m[val]; ok {
			count++
		}
		tmp.m[val] = struct{}{}
	}

	res := NewInt64WithSize(s.Size() - count)
	for val := range s.m {
		if _, ok := tmp.m[val]; !ok {
			res.m[val] = struct{}{}
		}
	}
	return res
}

// Intersect returns new Int64 about values which other set also contains.
func (s *Int64) Intersect(other Int64) Int64 {
	res := NewInt64WithSize(min(s.Size(), other.Size()))

	// loop over the smaller set
	if len(s.m) <= len(other.m) {
		for val := range s.m {
			if _, ok := other.m[val]; ok {
				res.m[val] = struct{}{}
			}
		}
	} else {
		for val := range other.m {
			if _, ok := s.m[val]; ok {
				res.m[val] = struct{}{}
			}
		}
	}
	return res
}

// IntersectSlice is similar to Intersect, but takes a slice as parameter.
func (s *Int64) IntersectSlice(other []int64) Int64 {
	res := NewInt64WithSize(min(s.Size(), len(other)))

	for _, val := range other {
		if _, ok := s.m[val]; ok {
			res.m[val] = struct{}{}
		}
	}
	return res
}

// Union returns new Int64 about values either in the set or the other set.
func (s *Int64) Union(other Int64) Int64 {
	res := NewInt64WithSize(s.Size() + other.Size())

	for val := range s.m {
		res.m[val] = struct{}{}
	}
	for val := range other.m {
		res.m[val] = struct{}{}
	}
	return res
}

// UnionSlice is similar to Union, but takes a slice as parameter.
func (s *Int64) UnionSlice(other []int64) Int64 {
	res := NewInt64WithSize(s.Size() + len(other))

	for val := range s.m {
		res.m[val] = struct{}{}
	}
	for _, val := range other {
		res.m[val] = struct{}{}
	}
	return res
}

// Size returns the size of set.
func (s *Int64) Size() int {
	return len(s.m)
}

// Slice converts set into int64 slice.
func (s *Int64) Slice() []int64 {
	res := make([]int64, 0, len(s.m))

	for val := range s.m {
		res = append(res, val)
	}
	return res
}

// Map converts set into map[int64]bool.
func (s *Int64) Map() map[int64]bool {
	res := make(map[int64]bool, len(s.m))

	for val := range s.m {
		res[val] = true
	}
	return res
}

// MarshalJSON implements json.Marshaler interface, the set will be
// marshaled as an int64 array.
func (s *Int64) MarshalJSON() ([]byte, error) {
	res := s.Slice()
	return json.Marshal(res)
}

// UnmarshalJSON implements json.Unmarshaler interface, it will unmarshal
// an int64 array to the set.
func (s *Int64) UnmarshalJSON(b []byte) error {
	vals := make([]int64, 0)
	err := json.Unmarshal(b, &vals)
	if err == nil {
		s.Add(vals...)
	}
	return err
}
